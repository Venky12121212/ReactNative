{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport GameScreen from \"./screens/GameScreen\";\nimport Colors from \"./constants/Colors\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport { useFonts } from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      userNumber = _useState2[0],\n      setUserNumber = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isgameOver = _useState4[0],\n      setIsGameOver = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      guessRounds = _useState6[0],\n      setGuessRounds = _useState6[1];\n\n  var _useFonts = useFonts({\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  }\n\n  var PickedNumberHandler = function PickedNumberHandler(pickedNumber) {\n    setUserNumber(pickedNumber);\n    setIsGameOver(false);\n  };\n\n  var GameOverHandler = function GameOverHandler(numberOfRounds) {\n    setIsGameOver(true);\n    setGuessRounds(numberOfRounds);\n  };\n\n  var startNewGameHandler = function startNewGameHandler() {\n    setUserNumber(null);\n    setGuessRounds(0);\n  };\n\n  var screen = _jsx(StartGameScreen, {\n    onPickNumber: PickedNumberHandler\n  });\n\n  if (userNumber) {\n    screen = _jsx(GameScreen, {\n      userNumber: userNumber,\n      onGameOver: GameOverHandler\n    });\n  }\n\n  if (isgameOver && userNumber) {\n    screen = _jsx(GameOverScreen, {\n      userNumber: userNumber,\n      numberOfRounds: guessRounds,\n      startNewGameHandler: startNewGameHandler\n    });\n  }\n\n  return _jsx(_Fragment, {\n    children: _jsx(LinearGradient, {\n      colors: [Colors.primary600, Colors.accent500],\n      style: styles.rootContainer,\n      children: _jsx(ImageBackground, {\n        source: require(\"./assets/background.jpg\"),\n        style: styles.rootContainer,\n        resizeMode: \"cover\",\n        imageStyle: styles.backgroundStyle,\n        children: _jsx(SafeAreaView, {\n          style: styles.rootContainer,\n          children: screen\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1\n  },\n  backgroundStyle: {\n    opacity: 0.15\n  }\n});","map":{"version":3,"names":["useState","StartGameScreen","LinearGradient","GameScreen","Colors","GameOverScreen","useFonts","AppLoading","App","userNumber","setUserNumber","isgameOver","setIsGameOver","guessRounds","setGuessRounds","require","fontsLoaded","PickedNumberHandler","pickedNumber","GameOverHandler","numberOfRounds","startNewGameHandler","screen","primary600","accent500","styles","rootContainer","backgroundStyle","StyleSheet","create","flex","opacity"],"sources":["/Users/venkydosapati/Desktop/WorkSpace/ReactWorkspace/ReactNative/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport { ImageBackground, StyleSheet, Text, View, SafeAreaView } from \"react-native\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport GameScreen from \"./screens/GameScreen\";\nimport Colors from \"./constants/Colors\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport { useFonts } from 'expo-font'\nimport AppLoading from 'expo-app-loading'\n\nexport default function App() {\n  const [userNumber, setUserNumber] = useState();\n  const [isgameOver, setIsGameOver] = useState(true);\n  const [guessRounds, setGuessRounds] = useState(0);\n\n  const [fontsLoaded] = useFonts({\n    \"open-sans\" : require('./assets/fonts/OpenSans-Regular.ttf'),\n    \"open-sans-bold\" : require('./assets/fonts/OpenSans-Bold.ttf')\n  })\n\n  if(!fontsLoaded) {\n    return <AppLoading/>\n  }\n\n  const PickedNumberHandler = (pickedNumber) => {\n    setUserNumber(pickedNumber);\n    setIsGameOver(false);\n  };\n\n  const GameOverHandler = (numberOfRounds) =>{\n    setIsGameOver(true);\n    setGuessRounds(numberOfRounds)\n  }\n\n  const startNewGameHandler = () => {\n    setUserNumber(null);\n    setGuessRounds(0);\n  }\n\n  let screen = <StartGameScreen onPickNumber={PickedNumberHandler}/>;\n  if (userNumber) {\n    screen = <GameScreen userNumber = {userNumber} onGameOver={GameOverHandler}/>;\n  }\n  if(isgameOver && userNumber){\n    screen = <GameOverScreen userNumber={userNumber} numberOfRounds={guessRounds} startNewGameHandler={startNewGameHandler}/>\n  }\n  return (\n    <>\n      <LinearGradient\n        colors={[Colors.primary600, Colors.accent500]}\n        style={styles.rootContainer}\n      >\n        <ImageBackground\n          source={require(\"./assets/background.jpg\")}\n          style={styles.rootContainer}\n          resizeMode=\"cover\"\n          imageStyle={styles.backgroundStyle}\n        >\n          <SafeAreaView style={styles.rootContainer}>{screen}</SafeAreaView>\n        </ImageBackground>\n      </LinearGradient>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n  },\n  backgroundStyle: {\n    opacity: 0.15,\n  },\n});\n"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;;;AAEA,OAAOC,eAAP;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAOC,UAAP;AACA,OAAOC,MAAP;AACA,OAAOC,cAAP;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAC5B,gBAAoCR,QAAQ,EAA5C;EAAA;EAAA,IAAOS,UAAP;EAAA,IAAmBC,aAAnB;;EACA,iBAAoCV,QAAQ,CAAC,IAAD,CAA5C;EAAA;EAAA,IAAOW,UAAP;EAAA,IAAmBC,aAAnB;;EACA,iBAAsCZ,QAAQ,CAAC,CAAD,CAA9C;EAAA;EAAA,IAAOa,WAAP;EAAA,IAAoBC,cAApB;;EAEA,gBAAsBR,QAAQ,CAAC;IAC7B,aAAcS,OAAO,uCADQ;IAE7B,kBAAmBA,OAAO;EAFG,CAAD,CAA9B;EAAA;EAAA,IAAOC,WAAP;;EAKA,IAAG,CAACA,WAAJ,EAAiB;IACf,OAAO,KAAC,UAAD,KAAP;EACD;;EAED,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,YAAD,EAAkB;IAC5CR,aAAa,CAACQ,YAAD,CAAb;IACAN,aAAa,CAAC,KAAD,CAAb;EACD,CAHD;;EAKA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACC,cAAD,EAAmB;IACzCR,aAAa,CAAC,IAAD,CAAb;IACAE,cAAc,CAACM,cAAD,CAAd;EACD,CAHD;;EAKA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;IAChCX,aAAa,CAAC,IAAD,CAAb;IACAI,cAAc,CAAC,CAAD,CAAd;EACD,CAHD;;EAKA,IAAIQ,MAAM,GAAG,KAAC,eAAD;IAAiB,YAAY,EAAEL;EAA/B,EAAb;;EACA,IAAIR,UAAJ,EAAgB;IACda,MAAM,GAAG,KAAC,UAAD;MAAY,UAAU,EAAIb,UAA1B;MAAsC,UAAU,EAAEU;IAAlD,EAAT;EACD;;EACD,IAAGR,UAAU,IAAIF,UAAjB,EAA4B;IAC1Ba,MAAM,GAAG,KAAC,cAAD;MAAgB,UAAU,EAAEb,UAA5B;MAAwC,cAAc,EAAEI,WAAxD;MAAqE,mBAAmB,EAAEQ;IAA1F,EAAT;EACD;;EACD,OACE;IAAA,UACE,KAAC,cAAD;MACE,MAAM,EAAE,CAACjB,MAAM,CAACmB,UAAR,EAAoBnB,MAAM,CAACoB,SAA3B,CADV;MAEE,KAAK,EAAEC,MAAM,CAACC,aAFhB;MAAA,UAIE,KAAC,eAAD;QACE,MAAM,EAAEX,OAAO,2BADjB;QAEE,KAAK,EAAEU,MAAM,CAACC,aAFhB;QAGE,UAAU,EAAC,OAHb;QAIE,UAAU,EAAED,MAAM,CAACE,eAJrB;QAAA,UAME,KAAC,YAAD;UAAc,KAAK,EAAEF,MAAM,CAACC,aAA5B;UAAA,UAA4CJ;QAA5C;MANF;IAJF;EADF,EADF;AAiBD;AAED,IAAMG,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;EAC/BH,aAAa,EAAE;IACbI,IAAI,EAAE;EADO,CADgB;EAI/BH,eAAe,EAAE;IACfI,OAAO,EAAE;EADM;AAJc,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}