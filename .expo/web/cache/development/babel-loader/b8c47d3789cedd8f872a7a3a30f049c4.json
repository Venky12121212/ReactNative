{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Title from \"../components/ui/Title\";\nimport Colors from \"../constants/Colors\";\nimport Card from \"../components/ui/Card\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction StartGameScreen(_ref) {\n  var onPickNumber = _ref.onPickNumber;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredNumber = _useState2[0],\n      setEnteredNumber = _useState2[1];\n\n  var numberInputHandler = function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  };\n\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredNumber('');\n  };\n\n  var confirmInputHandler = function confirmInputHandler() {\n    var chooseNumber = parseInt(enteredNumber);\n\n    if (isNaN(chooseNumber) || chooseNumber <= 0 || chooseNumber > 99) {\n      Alert.alert('Invalid Number!', 'Number has to be a number between 1 to 99.', [{\n        text: 'Okay',\n        style: 'destructive',\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n\n    onPickNumber(chooseNumber);\n  };\n\n  return _jsxs(View, {\n    style: styles.rootContainer,\n    children: [_jsx(Title, {\n      children: \"Guess My Number\"\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        children: \"Enter a Number\"\n      }), _jsx(TextInput, {\n        maxLength: 2,\n        keyboardType: \"number-pad\",\n        autoCorrect: true,\n        autoCapitalize: \"none\",\n        onChangeText: numberInputHandler,\n        value: enteredNumber,\n        style: styles.numerInput\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: resetInputHandler,\n            children: \"Reset\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: confirmInputHandler,\n            children: \"Add\"\n          })\n        })]\n      })]\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop: 100,\n    alignItems: 'center',\n    color: Colors.common.white\n  },\n  inputContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 40,\n    marginHorizontal: 24,\n    padding: 16,\n    backgroundColor: Colors.primary800,\n    borderRadius: 8,\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowRadius: 6,\n    shadowOpacity: 1\n  },\n  numerInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: Colors.accent500,\n    fontWeight: 'bold',\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    textAlign: 'center',\n    marginBottom: 10\n  },\n  buttonsContainer: {\n    flexDirection: 'row'\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});\nexport default StartGameScreen;","map":{"version":3,"names":["useState","InstructionText","PrimaryButton","Title","Colors","Card","StartGameScreen","onPickNumber","enteredNumber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chooseNumber","parseInt","isNaN","Alert","alert","text","style","onPress","styles","rootContainer","numerInput","buttonsContainer","buttonContainer","StyleSheet","create","flex","marginTop","alignItems","color","common","white","inputContainer","justifyContent","marginHorizontal","padding","backgroundColor","primary800","borderRadius","elevation","shadowColor","shadowOffset","width","height","shadowRadius","shadowOpacity","fontSize","borderBottomColor","accent500","fontWeight","borderBottomWidth","textAlign","marginBottom","flexDirection"],"sources":["/Users/venkydosapati/Desktop/WorkSpace/ReactWorkspace/ReactNative/screens/StartGameScreen.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { TextInput, Text, View, StyleSheet, Alert } from 'react-native'\r\nimport InstructionText from '../components/ui/InstructionText';\r\nimport PrimaryButton from '../components/ui/PrimaryButton'\r\nimport Title from '../components/ui/Title';\r\nimport Colors from '../constants/Colors';\r\nimport Card from '../components/ui/Card';\r\nfunction StartGameScreen({onPickNumber}) {\r\n    const [enteredNumber, setEnteredNumber] = useState('');\r\n\r\n    const numberInputHandler = (enteredText) => {\r\n        setEnteredNumber(enteredText)\r\n    }\r\n\r\n    const resetInputHandler = () => {\r\n        setEnteredNumber('')\r\n    }\r\n\r\n    const confirmInputHandler = () => {\r\n        const chooseNumber = parseInt(enteredNumber);\r\n        if(isNaN(chooseNumber) || chooseNumber <=0 || chooseNumber >99){\r\n            Alert.alert(\r\n                'Invalid Number!',\r\n                'Number has to be a number between 1 to 99.',\r\n                [{text: 'Okay', style: 'destructive', onPress: resetInputHandler}]\r\n            );\r\n            return;\r\n        }\r\n        onPickNumber(chooseNumber);\r\n    }\r\n    return (\r\n      <View style={styles.rootContainer}>\r\n        <Title>Guess My Number</Title>\r\n        <Card>\r\n          <InstructionText>Enter a Number</InstructionText>\r\n          <TextInput\r\n            maxLength={2}\r\n            keyboardType=\"number-pad\"\r\n            autoCorrect={true}\r\n            autoCapitalize=\"none\"\r\n            onChangeText={numberInputHandler}\r\n            value={enteredNumber}\r\n            style={styles.numerInput}\r\n          />\r\n          <View style={styles.buttonsContainer}>\r\n            <View style={styles.buttonContainer}>\r\n              <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\r\n            </View>\r\n            <View style={styles.buttonContainer}>\r\n              <PrimaryButton onPress={confirmInputHandler}>Add</PrimaryButton>\r\n            </View>\r\n          </View>\r\n        </Card>\r\n      </View>\r\n    );\r\n}\r\nconst styles = StyleSheet.create({\r\n    rootContainer:{\r\n        flex:1,\r\n        marginTop: 100,\r\n        alignItems: 'center',\r\n        color: Colors.common.white\r\n    },\r\n    inputContainer: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 40,\r\n        marginHorizontal: 24,\r\n        padding: 16,\r\n        backgroundColor: Colors.primary800,\r\n        borderRadius: 8,\r\n        elevation: 4,\r\n        shadowColor: 'black',\r\n        shadowOffset: { width: 0, height: 2 },\r\n        shadowRadius: 6,\r\n        shadowOpacity: 1,\r\n    },\r\n    numerInput: {\r\n        height: 50,\r\n        width: 50,\r\n        fontSize: 32,\r\n        borderBottomColor: Colors.accent500,\r\n        fontWeight: 'bold',\r\n        borderBottomWidth: 2,\r\n        color: Colors.accent500,\r\n        textAlign: 'center',\r\n        marginBottom: 10\r\n    },\r\n    buttonsContainer: {\r\n        flexDirection: 'row'\r\n    },\r\n    buttonContainer: {\r\n        flex: 1\r\n    }\r\n});\r\n\r\nexport default StartGameScreen"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;;;AAEA,OAAOC,eAAP;AACA,OAAOC,aAAP;AACA,OAAOC,KAAP;AACA,OAAOC,MAAP;AACA,OAAOC,IAAP;;;;AACA,SAASC,eAAT,OAAyC;EAAA,IAAfC,YAAe,QAAfA,YAAe;;EACrC,gBAA0CP,QAAQ,CAAC,EAAD,CAAlD;EAAA;EAAA,IAAOQ,aAAP;EAAA,IAAsBC,gBAAtB;;EAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,WAAD,EAAiB;IACxCF,gBAAgB,CAACE,WAAD,CAAhB;EACH,CAFD;;EAIA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;IAC5BH,gBAAgB,CAAC,EAAD,CAAhB;EACH,CAFD;;EAIA,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;IAC9B,IAAMC,YAAY,GAAGC,QAAQ,CAACP,aAAD,CAA7B;;IACA,IAAGQ,KAAK,CAACF,YAAD,CAAL,IAAuBA,YAAY,IAAG,CAAtC,IAA2CA,YAAY,GAAE,EAA5D,EAA+D;MAC3DG,KAAK,CAACC,KAAN,CACI,iBADJ,EAEI,4CAFJ,EAGI,CAAC;QAACC,IAAI,EAAE,MAAP;QAAeC,KAAK,EAAE,aAAtB;QAAqCC,OAAO,EAAET;MAA9C,CAAD,CAHJ;MAKA;IACH;;IACDL,YAAY,CAACO,YAAD,CAAZ;EACH,CAXD;;EAYA,OACE,MAAC,IAAD;IAAM,KAAK,EAAEQ,MAAM,CAACC,aAApB;IAAA,WACE,KAAC,KAAD;MAAA;IAAA,EADF,EAEE,MAAC,IAAD;MAAA,WACE,KAAC,eAAD;QAAA;MAAA,EADF,EAEE,KAAC,SAAD;QACE,SAAS,EAAE,CADb;QAEE,YAAY,EAAC,YAFf;QAGE,WAAW,EAAE,IAHf;QAIE,cAAc,EAAC,MAJjB;QAKE,YAAY,EAAEb,kBALhB;QAME,KAAK,EAAEF,aANT;QAOE,KAAK,EAAEc,MAAM,CAACE;MAPhB,EAFF,EAWE,MAAC,IAAD;QAAM,KAAK,EAAEF,MAAM,CAACG,gBAApB;QAAA,WACE,KAAC,IAAD;UAAM,KAAK,EAAEH,MAAM,CAACI,eAApB;UAAA,UACE,KAAC,aAAD;YAAe,OAAO,EAAEd,iBAAxB;YAAA;UAAA;QADF,EADF,EAIE,KAAC,IAAD;UAAM,KAAK,EAAEU,MAAM,CAACI,eAApB;UAAA,UACE,KAAC,aAAD;YAAe,OAAO,EAAEb,mBAAxB;YAAA;UAAA;QADF,EAJF;MAAA,EAXF;IAAA,EAFF;EAAA,EADF;AAyBH;;AACD,IAAMS,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;EAC7BL,aAAa,EAAC;IACVM,IAAI,EAAC,CADK;IAEVC,SAAS,EAAE,GAFD;IAGVC,UAAU,EAAE,QAHF;IAIVC,KAAK,EAAE5B,MAAM,CAAC6B,MAAP,CAAcC;EAJX,CADe;EAO7BC,cAAc,EAAE;IACZC,cAAc,EAAE,QADJ;IAEZL,UAAU,EAAE,QAFA;IAGZD,SAAS,EAAE,EAHC;IAIZO,gBAAgB,EAAE,EAJN;IAKZC,OAAO,EAAE,EALG;IAMZC,eAAe,EAAEnC,MAAM,CAACoC,UANZ;IAOZC,YAAY,EAAE,CAPF;IAQZC,SAAS,EAAE,CARC;IASZC,WAAW,EAAE,OATD;IAUZC,YAAY,EAAE;MAAEC,KAAK,EAAE,CAAT;MAAYC,MAAM,EAAE;IAApB,CAVF;IAWZC,YAAY,EAAE,CAXF;IAYZC,aAAa,EAAE;EAZH,CAPa;EAqB7BxB,UAAU,EAAE;IACRsB,MAAM,EAAE,EADA;IAERD,KAAK,EAAE,EAFC;IAGRI,QAAQ,EAAE,EAHF;IAIRC,iBAAiB,EAAE9C,MAAM,CAAC+C,SAJlB;IAKRC,UAAU,EAAE,MALJ;IAMRC,iBAAiB,EAAE,CANX;IAORrB,KAAK,EAAE5B,MAAM,CAAC+C,SAPN;IAQRG,SAAS,EAAE,QARH;IASRC,YAAY,EAAE;EATN,CArBiB;EAgC7B9B,gBAAgB,EAAE;IACd+B,aAAa,EAAE;EADD,CAhCW;EAmC7B9B,eAAe,EAAE;IACbG,IAAI,EAAE;EADO;AAnCY,CAAlB,CAAf;AAwCA,eAAevB,eAAf"},"metadata":{},"sourceType":"module"}