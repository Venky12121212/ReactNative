{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport GameScreen from \"./screens/GameScreen\";\nimport Colors from \"./constants/Colors\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      userNumber = _useState2[0],\n      setUserNumber = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isgameOver = _useState4[0],\n      setIsGameOver = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      guessRounds = _useState6[0],\n      setGuessRounds = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      appIsReady = _useState8[0],\n      setAppIsReady = _useState8[1];\n\n  var _useFonts = useFonts({\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Font.loadAsync(Entypo.font));\n\n            case 5:\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                return setTimeout(resolve, 2000);\n              }));\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 12:\n              _context.prev = 12;\n              setAppIsReady(true);\n              return _context.finish(12);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9, 12, 15]], Promise);\n    }\n\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!appIsReady) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  var PickedNumberHandler = function PickedNumberHandler(pickedNumber) {\n    setUserNumber(pickedNumber);\n    setIsGameOver(false);\n  };\n\n  var GameOverHandler = function GameOverHandler(numberOfRounds) {\n    setIsGameOver(true);\n    setGuessRounds(numberOfRounds);\n  };\n\n  var startNewGameHandler = function startNewGameHandler() {\n    setUserNumber(null);\n    setGuessRounds(0);\n  };\n\n  var screen = _jsx(StartGameScreen, {\n    onPickNumber: PickedNumberHandler\n  });\n\n  if (userNumber) {\n    screen = _jsx(GameScreen, {\n      userNumber: userNumber,\n      onGameOver: GameOverHandler\n    });\n  }\n\n  if (isgameOver && userNumber) {\n    screen = _jsx(GameOverScreen, {\n      userNumber: userNumber,\n      numberOfRounds: guessRounds,\n      startNewGameHandler: startNewGameHandler\n    });\n  }\n\n  return _jsx(_Fragment, {\n    children: _jsx(LinearGradient, {\n      colors: [Colors.primary600, Colors.accent500],\n      style: styles.rootContainer,\n      children: _jsx(ImageBackground, {\n        source: require(\"./assets/background.jpg\"),\n        style: styles.rootContainer,\n        resizeMode: \"cover\",\n        imageStyle: styles.backgroundStyle,\n        children: _jsx(SafeAreaView, {\n          style: styles.rootContainer,\n          children: screen\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1\n  },\n  backgroundStyle: {\n    opacity: 0.15\n  }\n});","map":{"version":3,"names":["useState","StartGameScreen","LinearGradient","GameScreen","Colors","GameOverScreen","useFonts","SplashScreen","App","userNumber","setUserNumber","isgameOver","setIsGameOver","guessRounds","setGuessRounds","appIsReady","setAppIsReady","require","fontsLoaded","useEffect","prepare","preventAutoHideAsync","Font","loadAsync","Entypo","font","Promise","resolve","setTimeout","console","warn","onLayoutRootView","useCallback","hideAsync","PickedNumberHandler","pickedNumber","GameOverHandler","numberOfRounds","startNewGameHandler","screen","primary600","accent500","styles","rootContainer","backgroundStyle","StyleSheet","create","flex","opacity"],"sources":["/Users/venkydosapati/Desktop/WorkSpace/ReactWorkspace/ReactNative/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport { ImageBackground, StyleSheet, Text, View, SafeAreaView } from \"react-native\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport GameScreen from \"./screens/GameScreen\";\nimport Colors from \"./constants/Colors\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport { useFonts } from 'expo-font'\n// import AppLoading from 'expo-app-loading'\nimport * as SplashScreen from 'expo-splash-screen';\n\nexport default function App() {\n  const [userNumber, setUserNumber] = useState();\n  const [isgameOver, setIsGameOver] = useState(true);\n  const [guessRounds, setGuessRounds] = useState(0);\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  const [fontsLoaded] = useFonts({\n    \"open-sans\" : require('./assets/fonts/OpenSans-Regular.ttf'),\n    \"open-sans-bold\" : require('./assets/fonts/OpenSans-Bold.ttf')\n  })\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Keep the splash screen visible while we fetch resources\n        await SplashScreen.preventAutoHideAsync();\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Please remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n  \n  if (!appIsReady) {\n    return null;\n  }\n\n  // if(!fontsLoaded) {\n  //   return <AppLoading/>\n  // }\n\n  const PickedNumberHandler = (pickedNumber) => {\n    setUserNumber(pickedNumber);\n    setIsGameOver(false);\n  };\n\n  const GameOverHandler = (numberOfRounds) =>{\n    setIsGameOver(true);\n    setGuessRounds(numberOfRounds)\n  }\n\n  const startNewGameHandler = () => {\n    setUserNumber(null);\n    setGuessRounds(0);\n  }\n\n  let screen = <StartGameScreen onPickNumber={PickedNumberHandler}/>;\n  if (userNumber) {\n    screen = <GameScreen userNumber = {userNumber} onGameOver={GameOverHandler}/>;\n  }\n  if(isgameOver && userNumber){\n    screen = <GameOverScreen userNumber={userNumber} numberOfRounds={guessRounds} startNewGameHandler={startNewGameHandler}/>\n  }\n  return (\n    <>\n      <LinearGradient\n        colors={[Colors.primary600, Colors.accent500]}\n        style={styles.rootContainer}\n      >\n        <ImageBackground\n          source={require(\"./assets/background.jpg\")}\n          style={styles.rootContainer}\n          resizeMode=\"cover\"\n          imageStyle={styles.backgroundStyle}\n        >\n          <SafeAreaView style={styles.rootContainer}>{screen}</SafeAreaView>\n        </ImageBackground>\n      </LinearGradient>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n  },\n  backgroundStyle: {\n    opacity: 0.15,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}